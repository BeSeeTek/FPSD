/*
 * fspd.h
 *
 *  Created on: 03.03.2021
 *      Author: benes
 */

#ifndef FSPD_H_
#define FSPD_H_

#include <SPI.h>
#include <inttypes.h>
#include <math.h>
#include "microsteps/microstep0064.h"

static const uint8_t hBridgeTestControlWords[36] = {
			0x00,0x00,0x00,//1st Bridge backwards
			0x00,0x00,0x00,//1st Bridge forwards
			0x00,0x00,0x00,//2nd Bridge backwards
			0x00,0x00,0x00,//2nd Bridge forwards
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,
			0x00,0x00,0x00,};

static const uint8_t hBridgeControlWords[30] = {
		0x00, 0x61, 0x5D,
		0x00, 0x6A, 0x1D,
		0x00, 0x6B, 0x85,
		0x00, 0x6B, 0xA8,
		0x00, 0x0B, 0xAE,
		0x00, 0x51, 0xAE,
		0x00, 0x56, 0x2E,
		0x00, 0x57, 0x46,
		0x00, 0x57, 0x58,
		0x00, 0x07, 0x5D};
// library interface description
static const uint16_t DACChannelPrefix[8]={0x0500,0x0D00,0x1500,0x1D00,0x2500,0x3500,0x3D00};// its 16 bit to avoid typecasting or <<8 operations targed data sizes is 16 bit anyway
class fpstepper {
	
public:
	// constructor:
	//pos actual position of the motor position in steps
	//stepToDeg angle incremnt for one step in deg Â°
	//currentlimit relative current for the H bridge generated by DAC voltage
	//I= Vref*currentlimit/255*RShunt RSHunt=0.22Ohm
	fpstepper(int SHIFTSS, int MR, int DACSS, int LDAC,int BUFFEN, int32_t pos,
			float stepToDeg, uint8_t currentLimit);
	//startes the SPI interface and wirtes currentlimit to the DAC
	void setup();
	//rotates clockweise
	void forward();
	//rotates counter clockweise
	void backward();
	//returns Motor angle in deg
	float getAng();
	// sets an relative currentlimit
	void setCurrentLimit(uint8_t currentLimt);
	void testBridge(uint8_t bridge,bool direction);

private:
	int _SHIFTSS = 0;
	int _SHCP = 0;
	int _MR = 0;
	int _DACSS = 0;
	int _LDAC = 0;
	int _BUFFEN=0;
	bool _microstep=false;
	uint8_t _currentLimit = 255;
	int32_t _pos = 0;
	float _stepToDeg = NAN;
	//SPI Configuration Seetings
	SPISettings _dacSPISettings = SPISettings(8000000, MSBFIRST, SPI_MODE0);
    SPISettings _shiftSPISettings = SPISettings(8000000, MSBFIRST, SPI_MODE0);
	//writes an step to the bridge shift registers
	void writeHBridge(uint8_t step);
	void writeMicrostep(uint8_t step);


};

#endif /* FPSD_H_ */
