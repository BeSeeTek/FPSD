# -*- coding: utf-8 -*-
"""
Created on Wed Mar 24 09:27:35 2021

@author: benes
"""
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
import math
from pathlib import Path

plt.rcParams['figure.dpi'] = 240
plt.rcParams["figure.figsize"] = (16,9)
ControalWords={
0:{-1    :[0x00,0x00,0xA0],#1st Bridge backwards
    1    :[0x00,0x00,0xC0],#1st Bridge forwards
    0    :[0x00,0x00,0x00]},

1:{-1    :[0x00,0x00,0x14],#2nd Bridge backwards
    1    :[0x00,0x00,0x1C], #2nd Bridge forwards
    0    :[0x00,0x00,0x00]},

2:{-1    :[0x00,0x80,0x02], #3rd Bridge backwards
    1    :[0x00,0x80,0x03], #3rd Bridge forwards
    0    :[0x00,0x00,0x00]},

3:{-1    :[0x00,0x50,0x00], #4th Bridge backwards
    1    :[0x00,0x60,0x00], #4th Bridge forwards
    0    :[0x00,0x00,0x00]},

4:{-1    :[0x00,0x0A,0x00], #5th Bridge backwards
    1    :[0x00,0x0C,0x00], #5th Bridge forwards
    0    :[0x00,0x00,0x00]},

5:{-1    :[0x40,0x01,0x00], #6th Bridge backwards
    1    :[0x80,0x01,0x00], #6th Bridge forwards
    0    :[0x00,0x00,0x00]}
}

def generateDACVals(stepNumber=64,DACResBit=8,initialPhase=0):
    Phase=np.zeros([stepNumber,5])
    for i in range(stepNumber):
        Phase[i]=initialPhase*np.ones(5)+np.array([0,1,2,3,4])*72+np.ones(5)*(i*360/stepNumber)
    fig,ax=plt.subplots(2,2)
    for i in range(5):
        ax[0,0].step(np.arange(stepNumber),Phase[:,i],where='mid',label='Winding '+str(i))
    ax[0,0].legend()
    ax[0,0].set_xlabel("Step")
    ax[0,0].set_ylabel("phase in Â°")
    ax[0,0].set_yticks(np.arange(9)*90)
    ax[0,0].grid()
    CosVals=np.cos(Phase/180*np.pi)
    for i in range(5):
        ax[0,1].step(np.arange(stepNumber),CosVals[:,i],where='mid',label='Winding '+str(i))
    ax[0,1].legend()
    ax[0,1].set_xlabel("Step")
    ax[0,1].set_ylabel("Desired winding current in AU")
    ax[0,1].grid()
    DACVals=abs(CosVals)*(np.power(2,DACResBit)-1)
    DACVals=np.round(DACVals,math.ceil(log10(np.power(2,DACResBit))))
    DACVals=DACVals.astype(int)
    for i in range(5):
        ax[1,0].step(np.arange(stepNumber),DACVals[:,i],where='mid',label='Winding '+str(i))
    ax[1,0].legend()
    ax[1,0].set_xlabel("Step")
    ax[1,0].set_ylabel("Desired winding current in LSB")
    ax[1,0].grid()
    Signs=np.sign(CosVals)
    for i in range(5):
        ax[1,1].step(np.arange(stepNumber),Signs[:,i],where='mid',label='Winding '+str(i))
    ax[1,1].legend()
    ax[1,1].set_xlabel("Step")
    ax[1,1].set_ylabel("sign of winding current DAC")
    ax[1,1].grid()
    fig.show()
    return DACVals,Signs,CosVals,Phase,fig

def convertToCArrays(DACVals,Signs,ControalWords):
    lenControalword=len(ControalWords[0][0])
    CDACVals='static const uint8_t DACData[5*'+str(DACVals.shape[0])+'] = { '
    for i in range(DACVals.shape[0]):
        for j in range(DACVals.shape[1]):
            CDACVals=CDACVals+hex(DACVals[i,j])+', '
            if (i%10)==0 and j==DACVals.shape[1]-1:
                CDACVals=CDACVals+'//This row holds '+str(i)+'. Step DACword 0,1,2,3,4,5 word for channel 0 is acced by DACData['+str(i*5)+']'
        CDACVals=CDACVals+'\n\t\t\t\t'
    CDACVals=CDACVals+'};'
    print(CDACVals)

    BridgeControalWords=np.zeros([lenControalword,DACVals.shape[0]]).astype(uint8)
    for i in range(DACVals.shape[0]):#loop over sings
        for signIDX in range(Signs.shape[1]):#loop over all signs
            for j in range(lenControalword):
                BridgeControalWords[j,i]=BridgeControalWords[j,i]|ControalWords[signIDX][Signs[i,signIDX]][j]
    print(BridgeControalWords)
    BridgeVALS='static const uint8_t BridgeWords[3*'+str(DACVals.shape[0])+'] = { '
    for i in range(DACVals.shape[0]):
        for j in range(lenControalword):
            BridgeVALS=BridgeVALS+hex(BridgeControalWords[j,i])+','
        if (i%10)==0:
            BridgeVALS=BridgeVALS+'//This row holds '+str(i)+'. Step BridgeControalWord 0,1,2 first sihftOutWord is acced by BridgeWords['+str(i*3)+']'
        BridgeVALS=BridgeVALS+'\n\t\t\t\t'
    BridgeVALS=BridgeVALS+'};'
    print(BridgeVALS)
    Hfile="""
    #ifndef FPSD_MICROSTEPS_H_
    #define FPSD_MICROSTEPS_H_
/*
 * microstep"""+str(DACVals.shape[0])+""".h
 *
 *  Created on: """+str(datetime.now())+"""
 *      Author: Benedikt Seeger
 *
 * This file was generated by microstep_gernerato.py. And contains the Shiftregsiter and DAC control words for a motor with 5 phases.
 * NUMBER OF MICROSTEPS="""+str(DACVals.shape[0])+"""
 */
 #define NUMBERMICROSTEPS """+str(DACVals.shape[0])+'\n'
    Hfile=Hfile+CDACVals
    Hfile=Hfile+'\n\n'
    Hfile=Hfile+BridgeVALS
    Hfile=Hfile+"""\n\n#endif /* FPSD_MICROSTEPS_H_ */"""
    print(Hfile)
    with open('microsteps\microstep'+str(DACVals.shape[0]).zfill(4)+'.h', 'w') as text_file:
        text_file.write(Hfile)
    return CDACVals,BridgeVALS

if __name__ == "__main__":
    Path("microsteps").mkdir(parents=True, exist_ok=True)
    steps=[10,15,20,25,30,32,45,50,60,64,72,90,100,128,150,200,256]
    for stepcount in steps:
        DACVals,Signs,CosVals,Phase,fig=generateDACVals(stepNumber=stepcount)
        convertToCArrays(DACVals,Signs,ControalWords)
        fig.savefig('microsteps\microstep'+str(DACVals.shape[0]).zfill(4)+'.png')